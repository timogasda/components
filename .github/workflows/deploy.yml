name: Deploy preview

on:
  workflow_run:
    workflows: ["Build, lint and test"]
    types: [completed]

permissions:
  id-token: write
  actions: read
  contents: read
  security-events: write
  deployments: write

jobs:
  # This job runs when the PR was created from a branch, not a fork.
  # In this case, deployments are always allowed so we output "can-deploy=true"
  check-branch:
    if: ${{ toJSON(github.event.workflow_run.pull_requests) != '[]' }}
    runs-on: ubuntu-latest
    outputs:
      can-deploy: true
    steps:
      - name: Can deploy from a branch
        run: echo "All good!"

  # This job runs when the PR was created from a fork.
  # In this case we check the existence of the "allow previews" label to determine the "can-deploy" output
  check-fork:
    if: ${{ toJSON(github.event.workflow_run.pull_requests) == '[]' }}
    runs-on: ubuntu-latest
    outputs:
      can-deploy: ${{ steps.check-label.outputs.result }}
    steps:
      # For forks, the PR context is not part of the event data. So we determine the PR number by looking up the head commit SHA.
      - name: Get PR number
        id: get-pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "number=$(gh pr view -R '${{ github.repository }}' '${{ github.event.workflow_run.head_repository.owner.login }}:${{ github.event.workflow_run.head_branch }}' --json number --jq ".number")" >> "$GITHUB_OUTPUT"
      - run: echo "$number"
        env:
          number: ${{ steps.get-pr.outputs.number }}
      # Retrieve a list of labels for the PR
      - name: Get PR labels
        id: get-labels
        env:
          GH_TOKEN: ${{ github.token }}
          number: ${{ steps.get-pr.outputs.number }}
        run: |
          echo "labels=$(gh api "/repos/${{ github.repository }}/pulls/$number" --jq '[.labels.[].name] | join(",")')" >> "$GITHUB_OUTPUT"
      - run: echo "$labels"
        env:
          labels: ${{ steps.get-labels.outputs.labels }}
      # Set the output based on the existance of the preview label
      - name: Check if preview label is attached
        id: check-label
        run: echo "result=${{ contains(steps.get-labels.outputs.labels, 'allow previews') }}" >> "$GITHUB_OUTPUT"

  # Run the deployment job if either of the previous jobs ran and returned true
  deploy:
    runs-on: ubuntu-latest
    needs: [check-branch, check-fork]
    if: |
      always() && (needs.check-branch.outputs.can-deploy == 'true' || needs.check-fork.outputs.can-deploy == 'true')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dev-pages
          path: build
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ github.token }}
      - name: Unpack
        run: |
          cd build
          tar -xf *.tar.gz
        shell: bash
      - name: Create deployment
        id: create-deployment
        env:
          GH_TOKEN: ${{ secrets.PREVIEW_DEPLOY_TOKEN }}
        run: |
          gh api -i --method POST /repos/${{ github.repository }}/deployments -f "ref=${{ github.event.workflow_run.head_sha }}" -f "environment=dev-pages" -f "required_contexts[]=build" -F "auto_merge=false" --jq '.id' > .deployment_out
          echo status=$(cat .deployment_out | head -n 1) >> "$GITHUB_OUTPUT"
          echo id=$(cat .deployment_out | tail -n 1) >> "$GITHUB_OUTPUT"
      - name: Check status code
        if: ${{ steps.create-deployment.outputs.status != 'HTTP/2.0 201 Created' }}
        run: exit 1
      - name: Deploy dev-pages
        id: deploy
        uses: timogasda/actions/.github/actions/deploy-static@main
        with:
          role-to-assume: ${{ secrets.AWS_PREVIEW_ROLE_ARN }}
          deployment-bucket: ${{ secrets.AWS_PREVIEW_BUCKET_NAME }}
          source-path: build/lib/static-default
          target-path: dev-pages
          commit-sha: ${{ github.event.workflow_run.head_sha }}
          cloudfront-host: d1ygrbexbkwxpo.cloudfront.net
      - name: Set deployment status (failure)
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.PREVIEW_DEPLOY_TOKEN }}
        run: |
          gh api --method POST /repos/${{ github.repository }}/deployments/${{ steps.create-deployment.outputs.id }}/statuses -f "state=failure"
      - name: Set deployment status (success)
        if: success()
        env:
          GH_TOKEN: ${{ secrets.PREVIEW_DEPLOY_TOKEN }}
        run: |
          gh api --method POST /repos/${{ github.repository }}/deployments/${{ steps.create-deployment.outputs.id }}/statuses -f "state=success" -f "log_url=${{ steps.deploy.outputs.preview-url }}index.html"
